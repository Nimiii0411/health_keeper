// database/database_connection.dart
import 'package:mongo_dart/mongo_dart.dart';
import 'dart:async';

class DatabaseConnection {
  static Db? _db;
  static bool _isConnected = false;

  // MongoDB Atlas connection string
  static const String _connectionString =
      'mongodb+srv://Nimiii:tmnt14121@healthapp.nt16qqk.mongodb.net/Healthkeeper?retryWrites=true&w=majority&appName=HealthApp';

  // Getter ƒë·ªÉ c√°c service kh√°c s·ª≠ d·ª•ng
  static Db? get database => _db;
  static bool get isConnected => _isConnected;

  // K·∫øt n·ªëi t·ªõi MongoDB v·ªõi timeout v√† retry
  static Future<void> connect() async {
    if (_isConnected && _db != null) {
      print('Database ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi tr∆∞·ªõc ƒë√≥');
      return;
    }

    int maxRetries = 3;
    int currentRetry = 0;

    while (currentRetry < maxRetries) {
      try {
        print('ƒêang k·∫øt n·ªëi MongoDB... (L·∫ßn th·ª≠ ${currentRetry + 1}/$maxRetries)');

        _db = await Db.create(_connectionString);
        await _db!.open().timeout(Duration(seconds: 30));

        // Test connection
        await _db!.serverStatus();

        _isConnected = true;
        print('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!');
        print('üìç Cluster: HealthApp');
        print('üìç Database: Healthkeeper');
        return;
      } catch (e) {
        currentRetry++;
        print('‚ùå L·ªói k·∫øt n·ªëi MongoDB (L·∫ßn ${currentRetry}): $e');

        if (currentRetry >= maxRetries) {
          _isConnected = false;
          throw Exception('Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB sau $maxRetries l·∫ßn th·ª≠: $e');
        }

        await Future.delayed(Duration(seconds: 2));
      }
    }
  }

  // ƒê√≥ng k·∫øt n·ªëi
  static Future<void> close() async {
    if (_db != null) {
      await _db!.close();
      _db = null;
      _isConnected = false;
      print('üîê ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
    }
  }

  // Test connection
  static Future<void> testConnection() async {
    try {
      if (!_isConnected || _db == null) {
        throw Exception('Ch∆∞a k·∫øt n·ªëi database');
      }

      print('=== Test Connection ===');
      print('Status: ${_isConnected ? "Connected" : "Disconnected"}');
      print('Database name: ${_db!.databaseName}');

      // Test v·ªõi collection users
      var usersCollection = _db!.collection('users');
      var count = await usersCollection.count();
      print('S·ªë users trong collection: $count');
      
    } catch (e) {
      print('‚ùå Test connection failed: $e');
    }
  }

  // L·∫•y collection theo t√™n
  static DbCollection? getCollection(String collectionName) {
    if (!_isConnected || _db == null) {
      print('‚ùå Database ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi');
      return null;
    }
    return _db!.collection(collectionName);
  }
}